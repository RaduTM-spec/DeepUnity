RWStructuredBuffer<float> theta;
RWStructuredBuffer<float> grad;
RWStructuredBuffer<float> buff1;
RWStructuredBuffer<float> buff2;
RWStructuredBuffer<float> buff3;

int t;
float gamma;
float beta1;
float beta2;
float epsilon;
float lambda;
bool maximize;
bool amsgrad;

#pragma kernel Adam
[numthreads(256, 1, 1)]
void Adam(int3 id : SV_DispatchThreadID)
{
    uint length;
    uint stride;
    theta.GetDimensions(length, stride);
    
    if(id.x > length)
        return;
    
    if (maximize)
        grad[id.x] = -grad[id.x];
    
    
    if (lambda != 0)
        grad[id.x] = grad[id.x] + lambda * theta[id.x];
    
    buff1[id.x] = beta1 * buff1[id.x] + (1 - beta1) * grad[id.x];
    buff2[id.x] = beta2 * buff2[id.x] + (1 - beta2) * grad[id.x] * grad[id.x];
    
    float mHat = buff1[id.x] / (1 - pow(beta1, (float) t));
    float vHat = buff2[id.x] / (1 - pow(beta2, (float) t));
    
    if(amsgrad)
    {
        buff3[id.x] = max(buff3[id.x], vHat);
        theta[id.x] = theta[id.x] - gamma * mHat / (sqrt(buff3[id.x]) + epsilon);
    }
    else
    {
        theta[id.x] = theta[id.x] - gamma * mHat / (sqrt(vHat) + epsilon);
    }

}